<html>
  <head>
    <title>Game Server</title>
    <style>
      canvas {
        border: 1px solid #000;
      }
    </style>
  </head>

  <body>
      <h2>Smalruby Koshien Log Viewer</h2>

      <canvas id="canvas" width="465" height="465"></canvas>
      <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        // Initial settings
        const cellSize = 30;
        const rows = 15;
        const cols = 15;
        let clusters = null;
        let centerPoints = null;

        // Draw grid
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < cols; j++) {
            ctx.fillStyle = 'rgb(192, 192, 192)';
            ctx.fillRect(j * cellSize + j, i * cellSize + i, cellSize, cellSize);
          }
        }
      </script>
      <div>
        <button onclick="previousTurn()">◀︎</button>
        <button onclick="nextTurn()">▶︎</button>
      </div>

      <div id="logDisplay">
        <% @logs.each_with_index do |log, index| %>
          <div class="turn" id="turn-<%= index %>" style="display: none;">
            <h4>turn: <%= index + 1 %></h4>
            <% if @clusters[index] != nil %>
              <h4 id="<%= index %>-clusters" data-clusters="<%= @clusters[index][0] %>">clusters: <%= @clusters[index][0] %></h4>
              <h4 id="<%= index %>-centroids" data-centroids="<%= @centroids[index][0] %>">centroids: <%= @centroids[index][0] %></h4>
              <h4 id="<%= index %>-mse" data-mse="<%= @mse[index][0] %>">mse: <%= @mse[index][0] %></h4>
            <% end %>

            <% log.each do |l| %>
              <%= simple_format(l) %>
            <% end %>
            <hr style="border: 1px solid #ccc; margin: 20px 0;">
          </div>
        <% end %>
      </div>

      <script>
        let currentTurn = 0;
        document.getElementById('turn-' + currentTurn).style.display = 'block';

        function previousTurn() {
          if (currentTurn > 0) {
            document.getElementById('turn-' + currentTurn).style.display = 'none';
            currentTurn--;
            document.getElementById('turn-' + currentTurn).style.display = 'block';

            // Draw grid
            for (let i = 0; i < rows; i++) {
              for (let j = 0; j < cols; j++) {
                ctx.fillStyle = 'rgb(192, 192, 192)';
                ctx.fillRect(j * cellSize + j, i * cellSize + i, cellSize, cellSize);
              }
            }

            // Draw clusters
            clusters = JSON.parse(document.getElementById(`${currentTurn}-clusters`).getAttribute('data-clusters'));
            clusters.forEach((cluster, index) => {
              const colors = Array.from({ length: clusters.length }, (_, i) => {
                const hue = (i * 360) / clusters.length; // 色相を均等に分配
                return `hsl(${hue}, 50%, 50%)`; // HSL形式で色を生成
              });
              ctx.fillStyle = colors[index % colors.length]; // HSL形式の色をfillStyleに設定

              cluster.forEach(([x, y]) => {
                ctx.fillRect((x-1) * cellSize + (x-1), (y-1) * cellSize + (y-1), cellSize, cellSize);
              });
            });
          }
        }

        function nextTurn() {
          if (currentTurn < <%= @logs.size - 1 %>) {
            document.getElementById('turn-' + currentTurn).style.display = 'none';
            currentTurn++;
            document.getElementById('turn-' + currentTurn).style.display = 'block';

            // Draw grid
            for (let i = 0; i < rows; i++) {
              for (let j = 0; j < cols; j++) {
                ctx.fillStyle = 'rgb(192, 192, 192)';
                ctx.fillRect(j * cellSize + j, i * cellSize + i, cellSize, cellSize);
              }
            }

            // Draw clusters
            clusters = JSON.parse(document.getElementById(`${currentTurn}-clusters`).getAttribute('data-clusters'));
            clusters.forEach((cluster, index) => {
              const colors = Array.from({ length: clusters.length }, (_, i) => {
                const hue = (i * 360) / clusters.length; // 色相を均等に分配
                return `hsl(${hue}, 50%, 50%)`; // HSL形式で色を生成
              });
              ctx.fillStyle = colors[index % colors.length]; // HSL形式の色をfillStyleに設定

              cluster.forEach(([x, y]) => {
                ctx.fillRect((x-1) * cellSize + (x-1), (y-1) * cellSize + (y-1), cellSize, cellSize);
              });
            });
          }
        }
      </script>
  </body>
</html>

